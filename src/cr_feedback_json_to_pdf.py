import json
import os
from jinja2 import Environment, BaseLoader
from weasyprint import HTML, CSS

# CSS: include status‑bar styles
css = CSS(string="""
@page {
  size: Letter;
  margin: 1in;
}
body {
  font-family: "SF Pro Text", sans-serif;
  margin: 0;
  line-height: 1.4;
}
h1 { font-family: Helvetica, sans-serif; font-size: 20pt; color: #558a86; margin:0.5em 0 0.2em; }
h2 { font-family: Helvetica, sans-serif; font-size: 16pt; color: #558a86; margin:1em 0 0.3em; }
h3 { font-weight: bold; font-size: 11pt; margin:0; padding:0; }
p  { font-size: 10pt; margin: 0.2em 0; }

/* Status bar container + fill */
.status-bar {
  background: #dddddd;
  border-radius: 4px;
  overflow: hidden;
  height: 0.8em;
  margin: 0.4em 0 0.8em;
}
.status-fill {
  height: 100%;
}
.section { margin-bottom: 1em; }
""")

# Jinja template
template = Environment(loader=BaseLoader()).from_string("""
<!DOCTYPE html>
<html><body>

  <h1>Feedback Summary</h1>
  <div class="section">
    {% for line in data["Feedback Summary"].split('\\n') %}
      <p>{{ line }}</p>
    {% endfor %}
  </div>

  <h1>Feedback Details</h1>
  {% for section, content in data["Feedback Details"].items() %}
    <h2>{{ section }}</h2>
    {% if content is string %}
      <div class="section">
        {% for line in content.split('\\n') %}
          <p>{{ line }}</p>
        {% endfor %}
      </div>
    {% else %}
      {# content is a mapping of Strengths, Areas for Improvement, maybe Problem X #}
      {% for key, val in content.items() %}
        {% if key == "Strengths" or key.startswith("Areas for Improvement") %}
          <h3>{{ key }}</h3>
          <div class="section">
            {% for line in val.split('\\n') %}
              <p>{{ line }}</p>
            {% endfor %}
          </div>
        {% elif key == "Skill Assessment" %}
          <h3>{{ key }}</h3>
          <div class="status-bar">
            <div class="status-fill"
                 style="width:{{ ratings[val].percent }}%;
                        background-color:{{ ratings[val].color }};">
            </div>
          </div>
        {% else %}
          <h3>{{ key }}</h3>
          <div class="section">
            {%- if val is string %}
              {# simple string → split into paragraphs #}
              {% for line in val.split('\\n') %}
                <p>{{ line }}</p>
              {% endfor %}
            {%- elif val is mapping %}
              {# nested mapping → render each sub‑key/value #}
              {% for subkey, subval in val.items() %}
                <h3>{{ subkey }}</h3>
                {% if subval is string %}
                  <div class="section">
                    {% for line in subval.split('\\n') %}
                      <p>{{ line }}</p>
                    {% endfor %}
                  </div>
                {% endif %}
              {% endfor %}
            {%- endif %}
          </div>
        {% endif %}
      {% endfor %}
    {% endif %}
  {% endfor %}

</body></html>
""")

def cr_feedback_json_to_pdf(model_name: str, output_dir: SyntaxWarning):
    pdf_dir = os.path.join(output_dir, model_name, "cr_feedback/pdf")
    os.makedirs(pdf_dir, exist_ok=True)
    json_dir = os.path.join(output_dir, model_name, "cr_feedback")
    for json_file in os.listdir(json_dir):
        if json_file.endswith(".json"):
            json_path = os.path.join(json_dir, json_file)
            with open(json_path, 'r', encoding='utf-8') as f:
                data = json.load(f)

            print(f"Processing {json_file} file generated by {model_name}for PDF formatting...")
            # Render HTML

            # Defining percent/color map
            ratings = {
                "Critical Gap":      {"percent":  25, "color": "#e57373"},  # red
                "Needs Improvement": {"percent":  50, "color": "#ffd54f"},  # yellow
                "Meets Expectations":{"percent":  75, "color": "#81d4fa"},  # light blue
                "Excellent":         {"percent": 100, "color": "#81c784"},  # green
            }
            html = template.render(data=data, ratings=ratings)
            base_filename = json_file.replace(".json", "")
            pdf_filename = f"{base_filename}.pdf"
            pdf_path = os.path.join(pdf_dir, pdf_filename)
            HTML(string=html).write_pdf(pdf_path, stylesheets=[css])
            print(f"Saved {json_file} as PDF: {pdf_path}")
